Abs 
## âœ… Task 1: Write a program to display output using `print`

  
import "fmt"

func main() {
    fmt.Println("Hello, World!")
}
 

> **Output:**  
> `Hello, World!`

---

## âœ… Task 2: Display the following pattern using placeholders
```
1
22
333
4444
55555
```

### **Answer:**
  

import "fmt"

func main() {
    for i := 1; i <= 5; i++ {
        fmt.Println(fmt.Sprintf("%d", i)[:1], strings.Repeat(fmt.Sprintf("%d", i)[:1], i-1))
    }
}
 

import "fmt"

func main() {
    for i := 1; i <= 5; i++ {
        fmt.Println(strings.Repeat(fmt.Sprintf("%d", i), i))
    }
}
 

> **Output:**
 
1
22
333
4444
55555
```

    

 

## âœ… Task 3: Do the following:
a. Declare a variable `x` and store value `1000` in it.  
b. Declare a variable `y` and store `"Programming"` in it.  
c. Print the values of `x` and `y`.  
d. Change the value of `x` to `1100`.  
e. Print the values again.

  

import "fmt"

func main() {
    var x int = 1000
    var y string = "Programming"

    fmt.Printf("x = %d, y = %s\n", x, y)

    x = 1100
    fmt.Printf("x = %d, y = %s\n", x, y)
}
 
```
x = 1000, y = Programming
x = 1100, y = Programming
```

---

## âœ… Task 4: Write a program to implement Scope and Shadowing

 
package main

import "fmt"

func main() {
    x := "outer"

    fmt.Println("Before block:", x)

    {
        x := "inner" // Shadowing outer x
        fmt.Println("Inside block:", x)
    }

    fmt.Println("After block:", x)
}
```

> **Output:**
```
Before block: outer
Inside block: inner
After block: outer
```
 

---

## âœ… Task 5: Implement
a. Implicit type declaration  
b. Explicit type declaration

### **Answer:**
```go
package main

import "fmt"

func main() {
    // a. Implicit type declaration
    name := "Go"
    age := 20
    price := 2.99

    // b. Explicit type declaration
    var lang string = "Go"
    var version int = 1
    var rating float64 = 4.8

    fmt.Printf("Implicit -> name: %T %v, age: %T %v, price: %T %v\n", name, name, age, age, price, price)
    fmt.Printf("Explicit -> lang: %T %v, version: %T %v, rating: %T %v\n", lang, lang, version, version, rating, rating)
}
```

> **Output:**
```
Implicit -> name: string Go, age: int 20, price: float64 2.99
Explicit -> lang: string Go, version: int 1, rating: float64 4.8
```

---

## âœ… Task 6: Declare an array `arr` of size 6 with numbers divisible by 2 from 0 to 10, then print it.

### **Answer:**
```go
package main

import "fmt"

func main() {
    var arr [6]int
    for i := 0; i < 6; i++ {
        arr[i] = i * 2 // 0, 2, 4, 6, 8, 10
    }
    fmt.Println("Array:", arr)
}
```

> **Output:**
```
Array: [0 2 4 6 8 10]
```

---

## âœ… Task 7: Write a program to create and access a tuple.

> ðŸ’¡ Go doesn't have tuples, but supports **multiple return values**, which act like tuples.

### **Answer:**
```go
package main

import "fmt"

func getPerson() (string, int, string) {
    return "Alice", 25, "Developer"
}

func main() {
    name, age, role := getPerson()
    fmt.Printf("Name: %s, Age: %d, Role: %s\n", name, age, role)
}
```

> **Output:**
```
Name: Alice, Age: 25, Role: Developer
```

---

## âœ… Task 8: Create an array of 10 elements and perform slice operations:
a. Slice of 2nd and 3rd element  
b. Omit start index  
c. Omit end index  
d. Omit both start and end

### **Answer:**
```go
package main

import "fmt"

func main() {
    arr := [10]int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}

    // a. 2nd and 3rd element (index 1 and 2)
    sliceA := arr[1:3]
    fmt.Println("a. 2nd and 3rd:", sliceA)

    // b. Omit start index
    sliceB := arr[:5]
    fmt.Println("b. Omit start:", sliceB)

    // c. Omit end index
    sliceC := arr[5:]
    fmt.Println("c. Omit end:", sliceC)

    // d. Omit both
    sliceD := arr[:]
    fmt.Println("d. Omit both:", sliceD)
}
```

> **Output:**
```
a. 2nd and 3rd: [1 2]
b. Omit start: [0 1 2 3 4]
c. Omit end: [5 6 7 8 9]
d. Omit both: [0 1 2 3 4 5 6 7 8 9]
```

---

## âœ… Task 9: Write a program to create different types of constants and print them.

### **Answer:**
```go
package main

import "fmt"

const (
    Pi       = 3.14159
    Language = "Go"
    IsFast   = true
    MaxUsers = 1000
    Version  = 1.23
)

func main() {
    fmt.Printf("Pi: %.5f\n", Pi)
    fmt.Printf("Language: %s\n", Language)
    fmt.Printf("IsFast: %t\n", IsFast)
    fmt.Printf("MaxUsers: %d\n", MaxUsers)
    fmt.Printf("Version: %.2f\n", Version)
}
```

> **Output:**
```
Pi: 3.14159
Language: Go
IsFast: true
MaxUsers: 1000
Version: 1.23
```

---

## âœ… Task 10: Declaring String Object and converting String Literal to String Object

> 
### **Answer:**
```go
package main

import (
    "fmt"
    "strings"
)

func main() {
    // String literal
    literal := "hello"

    // Convert literal to "object" via type conversion (conceptual)
    object := string(literal) // redundant but valid
    another := strings.ToTitle(literal) // actual transformation

    fmt.Printf("Literal: %s\n", literal)
    fmt.Printf("Object (converted): %s\n", object)
    fmt.Printf("Transformed: %s\n", another)
}
```

> **Output:**
```
Literal: hello
Object (converted): hello
Transformed: HELLO
 
                    

 

âœ… Done! You now have a clean, well-documented set of **Go programs** with **questions and answers** â€” ready for GitHub. Let me know if you'd like a **Python version** too!
